{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-dutch-rose-media-documentation","title":"Welcome to Dutch Rose Media Documentation","text":""},{"location":"#libraries","title":"Libraries:","text":""},{"location":"#placeables-toolkit-comdutchrosemediaplaceablestoolkit","title":"Placeables Toolkit: com.dutchrosemedia.placeablestoolkit","text":""},{"location":"placeablestoolkit/","title":"Dutch Rose Placeables Toolkit","text":""},{"location":"placeablestoolkit/#introduction","title":"Introduction","text":"<p>This toolkit is a helper library you can use in order to use AR functionalities in your project free of hustle.</p>"},{"location":"placeablestoolkit/#installation","title":"Installation","text":"<p>You can use the unity package manager to install the library:</p> <ol> <li> <p>Open package manager from Window -&gt; Package Management -&gt; Package Manager </p> </li> <li> <p>Choose the Plus Icon -&gt; Install package from git URL... </p> </li> <li> <p>Copy the <code>TODO: git url</code> and hit install.</p> </li> <li> <p>In order to import the Sample project import it from the Package Manager </p> </li> </ol>"},{"location":"placeablestoolkit/#core-components-breakdown","title":"Core Components Breakdown","text":"<pre><code>classDiagram\n  ARLifeCycleManager &lt;-- AbstractPlaceablesManager:Interfaces with\n  ARLifeCycleManager &lt;-- LifecycleUIResponder:Subscribes to\n  ARLifeCycleManager &lt;-- PlaceablesGlobalConfig:Defines configuration for\n  AbstractPlaceablesManager &lt;-- ARPlaceablesManager:Implements\n  AbstractPlaceablesManager &lt;-- Placeable:Registers to\n  ARImageTargerManager &lt;-- AbstractPlaceablesManager:Leverages\n  class LifecycleUIResponder{\n    Event based triggers for an AR Lifecycle\n  }\n  class ARLifeCycleManager{\n    Point of entry for an AR scene\n    Initiates connection\n    with underlying \n    AR SDK Parses a \n    PlaceablesGlobalConfig object.\n  }\n  class PlaceablesGlobalConfig{\n    ScriptableObject \n    allowing developers to\n    configure an AR session\n    in a flow-chart like manner\n    from the inspector\n  }\n  class ARPlaceablesManager{\n    ARFoudation specific\n    impl. of a \n    placeables manager\n  }\n  class AbstractPlaceablesManager{\n    Abstract interface \n    allowing `placeables` \n    to register themselves\n    for placement\n  }\n  class ARImageTargerManager{\n    MonoBehaviour \n    managing lifecycle of\n    an underlying \n    ARImageTracking component\n  }\n  class Placeable{\n    Scriptable object\n    defining placement\n    behaviour for AR objects\n  }</code></pre>"},{"location":"placeablestoolkit/#placeablesglobalconfig","title":"PlaceablesGlobalConfig","text":"<ul> <li> <p>Use ARKit Coaching Overlay: shows the iOS only Coaching Overlay when enabled, its functionality is detailed by Apple on this url</p> </li> <li> <p>Use Occlusion: enables depth mask/occlusion techniques, this works better on more modern phones as it can use lidar/depth sensors.</p> </li> <li> <p>DestroyPointCloudWhenTracking: tells the <code>lifecyclemanager</code> to destroy the <code>point cloud</code> when tracking is first found.</p> </li> <li> <p>DestroyPointCloudWhenPlanesFound: tells the <code>lifecyclemanager</code> to destroy the <code>point cloud</code> when planes are first found.</p> </li> <li> <p>AndroidMockInfinite: mocks the non-existent <code>infinite plane</code> on android systems.</p> </li> <li> <p>ResetARSessionOnDestroy: destroy an AR session when the containing scene is unloaded.</p> </li> <li> <p>CancelTouchesOnGestureDetection: used when \u2018pinching\u2019 is enabled, prevents a touch on the screen from triggering multiple gestures at the same time.</p> </li> <li> <p>On*Event: a number a <code>GameEvents</code> allowing developers to respond to AR lifecycle events using the <code>SOArchitecture/Events/GameEvent.cs</code> Game Event system without having to write code. </p> </li> </ul> More about <code>GameEvents</code> <p><code>GameEvents</code> is simply a concept to handle events in your application cleaner. It's a simple <code>ScriptableObject</code> with a listener alongside that can be invoked based on the events you want. OnTrackingFound and the rest of On* events are some use-cases of this pattern.</p> More info <p>Every AR scene always contains exactly one ARLifeCycleManager which initializes the AR foundation library when the scene loads.</p>"},{"location":"placeablestoolkit/#placeables","title":"Placeables","text":"<p>To simplify development in a codeless manner, the <code>Placeables</code> package lets developers define AR functionalities in a configurable manner from the inspector using <code>Placeable ScriptableObjects</code>. </p> <p>A placeable is an asset on the filesystem that can be supplied to an implementation of the <code>AbstractPlaceableManager</code> class. </p>"},{"location":"placeablestoolkit/#placeables-placement-strategies","title":"Placeables placement strategies","text":"<ul> <li>TapOnPlane: Physically mark the place to instantiate an object by tapping.</li> </ul> <ul> <li>CenterScreen: Drag an object around on the center of the screen, to then confirm placement by tapping.</li> </ul> <ul> <li> <p>CenterScreenImmediate: Instantiates an object using a raycast from the center of the screen. It does not ask the user to confirm and places immediately. </p> <ul> <li> <p>PrefabToPlace: which prefab will be used to be placed </p> </li> <li> <p>StartInEditMode: makes sure the gestureliner starts in an <code>Unlocked</code> state </p> </li> <li> <p>AnchorToPlane: leverages a concept called <code>ARAnchors</code> to make sure an object is physically anchored to a given place on a plane </p> </li> <li> <p>ScaleToFrustumWhenPlaced: scales the object to fit within the camera view when placed </p> </li> <li> <p>ClampScaleToMinAndMax: allows the developer to define a min and max scale </p> </li> <li> <p>RotateToCameraWhenPlaced: rotates the object to face the camera upon placement </p> </li> <li> <p>ImageTarget: A PNG that will be used for imagetracking. The prefab is then placed when the ImageTargetManager finds said image in the camera view. </p> </li> </ul> </li> </ul> <p></p> <ul> <li>ImageTarget: A PNG that will be used for imagetracking. The prefab is then placed when the ImageTargetManager finds said image in the camera view. </li> </ul> <p></p> <ul> <li>RelativeTransform: Place an object at a given distance and rotation from the user (currently used by ByAR) </li> </ul> <p></p>"},{"location":"placeablestoolkit/#gesture-manager","title":"Gesture Manager","text":"<p>There is a <code>GestureListener</code> <code>MonoBehaviour</code> which lets objects placed in AR easily respond to events thrown by the <code>GestureManager</code> class in a codeless manner. It is automatically attached to an instantiated prefab by the <code>PlaceablesManager</code>. </p> <pre><code>classDiagram\n  ARGestureManager &lt;-- AbstractGestureListener:Registers to\n  AbstractGestureListener &lt;-- ARGestureListener:Implements\n\n  class ARGestureListener{\n    ARFoundation specific\n    impl. of gestures listener\n  }\n  class AbstractGestureListener{\n    Abstract component letting\n    objects placed in AR receive\n    event-based manipulation\n    notifications.\n  }\n  class ARGestureManager{\n   Global component handling user input.\n   Allows easy object manipulation interactions.\n  }</code></pre>"},{"location":"placeablestoolkit/#supported-gestures","title":"Supported Gestures","text":"<ul> <li>Lock by Tap</li> <li>Unlock by long press</li> <li>Pinch in and out for scaling</li> <li>Drag the object to move</li> <li>Rotate </li> </ul>"},{"location":"placeablestoolkit/#dependencies","title":"Dependencies","text":"<ul> <li>AR Foundation</li> <li>Google ARCore XR Plugin</li> <li>Apple ARKit XR Plugin</li> <li>XR Plugin Management</li> <li>Editor Coroutines</li> <li>XR Interaction Toolkit</li> </ul>"}]}